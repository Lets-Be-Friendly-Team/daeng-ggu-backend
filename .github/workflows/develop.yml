name: daeng-ggu dev service CI/CD

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  AWS_CODE_DEPLOY_APPLICATION: ${{ secrets.AWS_CODE_DEPLOY_APPLICATION }}
  AWS_CODE_DEPLOY_GROUP: ${{ secrets.AWS_CODE_DEPLOY_GROUP }}

jobs:
  build-and-lint:
    runs-on: ubuntu-latest

    steps:
      # Checkout 코드
      - name: Checkout
        uses: actions/checkout@v3

      # application.properties 파일 직접 생성, secrets 설정값 넣기
      - name: make application.properties
        run: |
          sudo mkdir -p /home/ec2-user/daeng-ggu-backend/src/main/resources
          cd /home/ec2-user/daeng-ggu-backend/src/main/resources
          sudo touch application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties

      # JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 캐싱
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Spotless 스타일 검사
      - name: Code style check with Spotless
        run: ./gradlew spotlessCheck

      # 프로젝트 빌드 (테스트 제외)
      - name: Build the Project
        run: ./gradlew clean build -x test

      # 디렉토리 생성
      - name: Make Directory
        run: |
          mkdir -p /home/ec2-user/deploy

      # Jar 파일 복사
      - name: Copy Jar
        run: |
          cp ../../build/libs/daeng-guu-backend-0.0.1-SNAPSHOT.jar /home/ec2-user/deploy

      # appspec.yml 파일 복사
      - name: Copy appspec.yml
        run: |
          cp ../../appspec.yml /home/ec2-user/deploy

      # script 파일 복사
      - name: Copy deploy.sh
        run: |
          cp ../../scripts/deploy.sh /home/ec2-user/deploy

      # ZIP 파일로 압축
      - name: Make zip file
        run: |
          zip -r /home/ec2-user/daeng-guu-backend-0.0.1-SNAPSHOT.zip /home/ec2-user/deploy

      # AWS CLI 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # 등록한 Github Secret이 자동으로 불려온다.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려온다.
          aws-region: ${{ env.AWS_REGION }}

      # 빌드된 JAR 파일을 S3로 업로드
      - name: Upload to S3
        run: aws s3 cp /home/ec2-user/daeng-guu-backend-0.0.1-SNAPSHOT.zip s3://${{ secrets.S3_BUCKET_NAME }}/daeng-guu-backend-0.0.1-SNAPSHOT.zip --region ${{ env.AWS_REGION }}

      # CodeDeploy를 통해 EC2에 배포
      - name: Code Deploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.AWS_CODE_DEPLOY_APPLICATION }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ secrets.AWS_CODE_DEPLOY_GROUP }} \
            --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=daeng-guu-backend-0.0.1-SNAPSHOT.zip --region ${{ env.AWS_REGION }}

